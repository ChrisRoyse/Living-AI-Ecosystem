import { Signature } from './signature';
/**
 * Base class for DSPy.ts modules.
 * Each module must define a signature and implement the run method.
 */
export declare abstract class Module<TInput extends Record<string, any>, TOutput extends Record<string, any>> {
    readonly name: string;
    readonly signature: Signature;
    readonly promptTemplate: (input: TInput) => string;
    readonly strategy: 'Predict' | 'ChainOfThought' | 'ReAct';
    constructor(options: {
        name: string;
        signature: Signature;
        promptTemplate: (input: TInput) => string;
        strategy: 'Predict' | 'ChainOfThought' | 'ReAct';
    });
    /**
     * Runs the module on the given input.
     * @param input - The input data to process
     * @returns A promise that resolves to the output data
     */
    abstract run(input: TInput): Promise<TOutput>;
    /**
     * Validates that the input matches the module's input signature
     */
    protected validateInput(input: TInput): void;
    /**
     * Validates that the output matches the module's output signature
     */
    protected validateOutput(output: TOutput): void;
}
