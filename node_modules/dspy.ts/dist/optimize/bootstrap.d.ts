/**
 * Bootstrap Few-Shot optimizer implementation
 */
import { Module } from '../core/module';
import { Optimizer, OptimizerConfig, TrainingExample, MetricFunction } from './base';
/**
 * Configuration for BootstrapFewShot optimizer
 */
export interface BootstrapConfig extends OptimizerConfig {
    maxLabeledDemos?: number;
    maxBootstrappedDemos?: number;
    minScore?: number;
}
/**
 * BootstrapFewShot optimizer that generates demonstrations using a teacher model
 */
export declare class BootstrapFewShot<TInput extends Record<string, any>, TOutput extends Record<string, any>> extends Optimizer<TInput, TOutput> {
    protected config: Required<BootstrapConfig>;
    private optimizedProgram;
    constructor(metric: MetricFunction<TInput, TOutput>, config?: BootstrapConfig);
    /**
     * Generate demonstrations using the teacher model
     */
    private generateDemonstrations;
    /**
     * Compile a program with bootstrap few-shot optimization
     */
    compile(program: Module<TInput, TOutput>, trainset: TrainingExample<TInput, TOutput>[]): Promise<Module<TInput, TOutput>>;
    /**
     * Save the optimized program to a file
     */
    save(path: string, saveFieldMeta?: boolean): void;
    /**
     * Load an optimized program from a file
     */
    load(path: string): void;
}
